@page "/Library/editbook/{id:int}"

@inject ILibraryServices LibraryService
@inject NavigationManager NavigationManager

<PageTitle>Edit book</PageTitle>
<h3>Editing Book</h3>
@if (book == null)
{
    <p><em>@message</em></p>
}
else
{
    <BookForm book="book" OnValidSubmit="HandleValidSubmit" parameters="param"></BookForm>
    <button class="btn btn-danger" @onclick=HandleDelete>Delete</button>
}



@code {
    [Parameter]
    public int Id { get; set; }

    private Dictionary<string, Object> param { get; set; }

    private BookViewModel book;
    private string message = "Loading product...";

    protected override async Task OnInitializedAsync()
    {
        param = new Dictionary<string, Object>();
        param.Add("ButtonName","Update");
        var response = await LibraryService.GetBookAsync(Id);

        if (response.Success && response.Data != null)
        {
            book = new BookViewModel(response.Data);
        }
        else if (response.Data == null)
        {
            message = "Book not found!";
        }
        else
        {
            message = response.Message;
        }
    }

    async Task HandleValidSubmit()
    {
        var response = await LibraryService.updateBookAsync(book.name,book.author,book.pages,book.genresString,Id);
        if (response.Success)
            NavigationManager.NavigateTo("/Library");
        else
            message = response.Message;
    }

    async Task HandleDelete()
    {
        var response = await LibraryService.removeBookAsync(book.id);
        if (response.Success)
            NavigationManager.NavigateTo("/Library");
        else
            message = "Error number "+response.Message;
    }
}
