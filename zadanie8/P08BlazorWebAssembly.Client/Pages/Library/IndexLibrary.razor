@page "/Library"

@inject ILibraryServices LibraryService
@inject NavigationManager NavigationManager

<PageTitle>ILibrary</PageTitle>
<h3>Full list of books</h3>

@if (books == null)
{
    <p><em>@message</em></p>
}

else
{
    <!--<div>
        <InputText @bind-Value=searchTerm></InputText>
        <button class="btn btn-primary" @onclick=Search>Search</button>
    </div>-->

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Author</th>
                <th>Pages</th>
                <th>Genres</th>
            </tr>
        </thead>
        <tbody>
            @foreach (BookViewModel book in books)
            {
                <tr>
                    <td>@book.id</td>
                    <td>@book.name</td>
                    <td>@book.author</td>
                    <td>@book.pages</td>
                    <td>@book.genresString</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> GoToEdit(book.id)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" disabled="@(currentPage==1)" @onclick="PreviousPage">Previous</button>
    <span>@currentPage</span>
    <button class="btn btn-primary" disabled="@(currentPage==maxPage)" @onclick="NextPage">Next</button>

    <div>
        <span>Page Size</span>
        <button class="btn PageSize" disabled="@(pageSize==5)" @onclick="() => ChangePageSize(5)">5</button>
        <button class="btn PageSize" disabled="@(pageSize==10)" @onclick="() => ChangePageSize(10)">10</button>
        <button class="btn PageSize" disabled="@(pageSize==20)" @onclick="() => ChangePageSize(20)">20</button>
    </div>
    
}

<p>
    <a href="Library/addbook">Create new product</a>
</p>

@code {
    private List<BookViewModel> books;
    private string message = "Loading books...";

    private int currentPage = 1;
    private int pageSize = 5;
    private int maxPage = 1;

    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await  LoadProducts();
    }

    private async Task LoadProducts()
    {
        var response = await LibraryService.GetBookPageAsync(pageSize,currentPage);
        if (response.Success && response.Data != null)
        {
            maxPage = response.MaxPage;
            List<Book> bookList = response.Data;
            books = new List<BookViewModel>();
            foreach (Book book in response.Data)
            {
                books.Add(new BookViewModel(book));
            }
        }
        else if (response.Data == null)
        {
            message = "Database is empty!";
        }
        else
        {
            message = response.Message;
        }
    }

    void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/Library/editbook/{id}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadProducts();
        }
    }
    private async Task NextPage()
    {
        if (currentPage < maxPage)
        {
            currentPage++;
            await LoadProducts();
        }
    }

    private async Task ChangePageSize(int newSize)
    {
        pageSize = newSize;
        await LoadProducts();
    }
}

